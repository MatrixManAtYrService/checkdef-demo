{
  description = "Checkdef demo project showing selective test caching";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    #checkdef.url = "github:MatrixManAtYrService/checkdef";
    checkdef.url= "path:/Users/matt/src/checkdef";
    pyproject-nix = {
      url = "github:pyproject-nix/pyproject.nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    uv2nix = {
      url = "github:pyproject-nix/uv2nix";
      inputs = {
        pyproject-nix.follows = "pyproject-nix";
        nixpkgs.follows = "nixpkgs";
      };
    };
    pyproject-build-systems = {
      url = "github:pyproject-nix/build-system-pkgs";
      inputs = {
        pyproject-nix.follows = "pyproject-nix";
        uv2nix.follows = "uv2nix";
        nixpkgs.follows = "nixpkgs";
      };
    };
    globset = {
      url = "github:pdtpartners/globset";
      inputs.nixpkgs-lib.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, checkdef, pyproject-nix, uv2nix, pyproject-build-systems, globset }:
    let
      inherit (nixpkgs) lib;
      forAllSystems = lib.genAttrs [ "x86_64-linux" "aarch64-linux" "x86_64-darwin" "aarch64-darwin" ];
    in
    {
      packages = forAllSystems (system:
        let
          overlay = final: prev: {
            globset = globset;
          };
          pkgs = (nixpkgs.legacyPackages.${system}).extend overlay;

          # Load the workspace from uv.lock
          # Filter workspace root to only include necessary files for dependency resolution
          workspaceRoot = lib.cleanSourceWith {
            src = ./.;
            filter = path: type:
              let
                baseName = builtins.baseNameOf path;
                relPath = lib.removePrefix (toString ./. + "/") (toString path);
              in
                # Include directories for traversal
                type == "directory" ||
                # Include files needed for Python environment setup
                baseName == "pyproject.toml" ||
                baseName == "uv.lock" ||
                baseName == "setup.py" ||
                baseName == "setup.cfg" ||
                baseName == "requirements.txt" ||
                # Include src/__init__.py for package detection
                relPath == "src/__init__.py";
          };
          
          workspace = uv2nix.lib.workspace.loadWorkspace {
            inherit workspaceRoot;
          };

          # Create the python package set
          pythonSet = (pkgs.callPackage pyproject-nix.build.packages {
            python = pkgs.python311;
          }).overrideScope (
            lib.composeManyExtensions [
              pyproject-build-systems.overlays.default
              (workspace.mkPyprojectOverlay { sourcePreference = "wheel"; })
            ]
          );

          # Build the Python environment (includes all dependency groups)
          pythonEnv = pythonSet.mkVirtualEnv "dev-env" workspace.deps.all;

          # provide this project's version of nixpkgs to checkdef
          checkdefLib = checkdef.lib pkgs;

          src = ./.;

          # Helper function to create filtered source
          filterSource = patterns: src:
            let
              # Convert glob patterns to regex patterns
              globToRegex = pattern:
                builtins.replaceStrings
                  ["**" "*" "?"]
                  [".*" "[^/]*" "."]
                  pattern;
              
              # Check if path matches any pattern
              matchesAnyPattern = path: 
                let
                  relPath = lib.removePrefix (toString src + "/") (toString path);
                in
                  lib.any (pattern: 
                    builtins.match (globToRegex pattern) relPath != null
                  ) patterns;
            in
              lib.cleanSourceWith {
                inherit src;
                filter = path: type:
                  let
                    relPath = lib.removePrefix (toString src + "/") (toString path);
                    baseName = builtins.baseNameOf path;
                  in
                    # Always include directories for traversal
                    type == "directory" ||
                    # Include files matching patterns
                    matchesAnyPattern path ||
                    # Include common Python config files
                    baseName == "pyproject.toml" ||
                    baseName == "setup.py" ||
                    baseName == "setup.cfg" ||
                    baseName == "uv.lock" ||
                    # Include __init__.py files in src directory
                    (lib.hasPrefix "src/" relPath && baseName == "__init__.py");
              };

          ruffChecks = {
            ruffCheck = checkdefLib.ruff-check { inherit src; };
            ruffFormat = checkdefLib.ruff-format { inherit src; };
          };

          fooChecks = checkdefLib.pytest-cached {
            # Filter source to only include foo-related files
            src = filterSource [
              "src/__init__.py"      # Package root
              "src/foo/.*"           # Foo module
              "tests/test_foo.py"    # Foo tests
              "tests/__init__.py"    # Tests package (if exists)
            ] ./.;
            inherit pythonEnv;
            name = "foo-tests";
            description = "Foo module tests";
            tests = [ "tests/test_foo.py" ];
          };

          barChecks = checkdefLib.pytest-cached {
            # Filter source to only include bar-related files
            src = filterSource [
              "src/__init__.py"      # Package root
              "src/bar/.*"           # Bar module
              "tests/test_bar.py"    # Bar tests
              "tests/__init__.py"    # Tests package (if exists)
            ] ./.;
            inherit pythonEnv;
            name = "bar-tests";
            description = "Bar module tests";
            tests = [ "tests/test_bar.py" ];
          };

        in
        rec {
          checkdef-demo = pythonSet.checkdef-demo;
          default = checkdef-demo;

          # Expose test derivations for direct access
          foo-tests = fooChecks;
          foo-tests-verbose = fooChecks.passthru.verbose;
          bar-tests = barChecks;
          bar-tests-verbose = barChecks.passthru.verbose;

          checklist-linters = checkdefLib.runner {
            name = "linter-checks";
            scriptChecks = ruffChecks;
          };

          checklist-foo = checkdefLib.runner {
            name = "foo-checks";
            suiteName = "foo-checks";
            derivationChecks = {
              fooTests = fooChecks;
            };
          };

          checklist-bar = checkdefLib.runner {
            name = "bar-checks";
            derivationChecks = {
              barTests = barChecks;
            };
          };

          checklist-all = checkdefLib.runner {
            name = "all-checks";
            scriptChecks = ruffChecks;
            derivationChecks = {
              fooTests = fooChecks;
              barTests = barChecks;
            };
          };
        });
    };
}
